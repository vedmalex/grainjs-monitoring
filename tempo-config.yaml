server:
  http_listen_port: 3200 # Port for UI requests (e.g., from Grafana)

distributor:
  receivers: # Data reception configuration
    otlp:
      protocols:
        http:
          endpoint: 0.0.0.0:4318
        grpc:
          endpoint: 0.0.0.0:4317

ingester:
  trace_idle_period: 300s    # Time to wait for spans before flushing (reduced from default 10s)
  max_block_bytes: 100000    # Maximum block size before flush (reduced from 1000000 for more frequent writes)
  max_block_duration: 5m     # Maximum time to keep block in memory before flushing
  flush_check_period: 1s     # How often to check if blocks need to be flushed

compactor:
  compaction:
    block_retention: 72h # How long to retain compacted blocks in storage (72 hours) it can be reduced to 48h/24h

storage: # Trace storage configuration
  trace:
    backend: local # Using local filesystem for storage
    local:
      path: /tmp/tempo/blocks

# Grafana integration settings
# Note: search section has been updated, 'backend: local' is now typically implied by default
# query_frontend:
#   search:
#     # backend: local # This field has been deprecated or changed

metrics_generator: # Optional span-to-metrics generator configuration
  registry:
    external_labels:
      source: tempo
      cluster: docker-compose
  storage:
    path: /tmp/tempo/generator/wal
  processor:
    service_graphs:
      wait: 10s  # Wait time for service graph generation
    span_metrics: # Service graph metrics configuration
      dimensions:
        - service.name
        - operation
        - span.kind
      # Values in seconds: 0.001 = 1ms, 0.002 = 2ms, etc.
      histogram_buckets: [0.001, 0.002, 0.004, 0.008, 0.016, 0.032, 0.064, 0.128, 0.256, 0.512, 1.0]
      # Following fields have been deprecated or removed:
      # latency_histogram_buckets: [100us, 1ms, 2ms, 6ms, 10ms, 100ms, 1s]
      # dimensions_cache_size: 100000

overrides:
  metrics_generator_processors: [service-graphs, span-metrics]
  ingestion_rate_strategy: local
  ingestion_rate_limit_bytes: 100000   # Limit for incoming data rate
  ingestion_burst_size_bytes: 200000   # Maximum burst size for incoming data